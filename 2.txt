внешняя﻿
#include <Windows.h>
#include "HashTable_1.h"
#include <iostream>

int main()
{
    SetConsoleOutputCP(1251);
    SetConsoleCP(1251);

    std::ifstream file("data.txt");
    HashTable_1 table(100);

    std::string key, val;

    /*while (file >> key >> val)
        table.insert(std::make_pair(key, val));

    table.view();

    std::pair<std::string, std::string> pair;

    std::cout << (table.find("Fox", pair) ? pair.first + ' ' + pair.second : "");
    std::cout << "\n--------\n";
    table.erase("Fox");

    table.view();*/

    table.fill(file);
    table.view();

    std::pair<std::string, std::string> pair;
    table.find("fox", pair);
    std::cout << '\n' << pair.first << ' ' << pair.second;

    std::cout << "\n------------------------\n";

    table.insert(std::make_pair("fox", "лиса"));
    table.view();

    std::cout << "\n------------------------\n";

    if (table.erase("fox"))
        std::cout << "\nElem has been deleted.\n";
    else std::cout << "\nElem is not deleted.\n";

    std::cout << "\n------------------------\n";

    std::pair<std::string, std::string> pair1;
    if (table.find("rabbit", pair1))
        std::cout << pair1.second << '\n';
    else std::cout << "\nElem is not found\n";

    std::cout << "\n------------------------\n";

    table.view();

    std::cout << "\n------------------------\n";

    std::cin.get();
    return 0;
}

--------------------------------------------------------------------------------------------------
внутренняя с индикатором
﻿#include "HashTable2.h"
#include <Windows.h>

int main()
{
    SetConsoleOutputCP(1251);
    SetConsoleCP(1251);

    std::ifstream file("data.txt");
    HashTable2 table(100);
    table.fill(file);

    table.insert(std::make_pair("elephant", "слон"));
    table.insert(std::make_pair("elephant", "слон"));
    table.view();

    std::cout << "\n--------------------\n";

    table.erase("fox");
    table.view();

    std::cout << "\n--------------------\n";

    table.insert(std::make_pair("fox", "лиса"));
    table.view();

    std::cout << "\n--------------------\n";

    std::pair<std::string, std::string> pr;
    table.find("elephant", pr);
    std::cout << pr.first << " - " << pr.second;

    std::cin.get();
    return 0;
}
------------------------------------------------------------------------------------------------------
внутренняя
﻿#include "HashTable3.h"
#include <Windows.h>

int main()
{
    SetConsoleOutputCP(1251);
    SetConsoleCP(1251);
    
    std::ifstream file("data.txt");
    HashTable3 table(100);

    table.fill(file);
    table.view();

    std::cin.get();
    return 0;
}

"HashTable3.h"
#include "HashTable3.h"

HashTable3::HashTable3(size_t maxSize)
{
    this->maxSize = maxSize;
    table.resize(maxSize);
}

size_t HashTable3::hash(std::string key)
{
    size_t summ = 0;

    for (auto& symb : key)
        summ += symb;

    return summ % maxSize;
}

bool HashTable3::insert(info_t pair)
{
    bool result = false;
    size_t position = hash(pair.first);

    while (table[position].info.first != pair.first && table[position].used)
        position = (position + 1) % maxSize;

    if (!table[position].used) {
        result = true;
        table[position].info = pair;
        table[position].used = true;
    }

    return result;
}

bool HashTable3::erase(std::string key)
{
    bool result = false;
    size_t window = hash(key);

    while (table[window].used) {
        if (table[window].info.first == key) {
            result = true;
            table[window].used = false;
        }

        window = (window + 1) % maxSize;
    }

    return result;
}

bool HashTable3::find(std::string key, info_t& pair)
{
    size_t position = hash(key);
    bool result = false;

    while (!(table[position].used == 0 || table[position].info.first == key && table[position].used == 1))
        position = (position + 1) % maxSize;

    if (table[position].used) {
        result = true;
        pair = table[position].info;
    }

    return result;
}

void HashTable3::fill(std::ifstream& file)
{
    std::string key, value;

    while (file >> key >> value)
        insert(std::make_pair(key, value));
}

void HashTable3::view()
{
    size_t position;

    for (int i = 0; i < table.size(); ++i) {
        if (table[i].used == 1) {
            position = hash(table[i].info.first);
            std::cout << position << ". " << table[i].info.first << " - " << table[i].info.second << '\n';
        }
    }
    std::cout << '\n';
}
